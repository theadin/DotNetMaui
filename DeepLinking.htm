<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>The Super clear tutorial on Deep Linking (Web links) for .Net Maui in Android Developers</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <style>
        .adin_gray_box { background-color: #f3f8f8 }
    </style>
</head>
<body>


    <b>The Super Simple tutorial on Deep Linking (Web links) for .Net Maui in Android Developers</b>
    <br />
    Where I explain how to have a link to your website, open the app and handle it
    <br>
    <br>
    Sources I used to learn this:
    <br>
    <a href="https://learn.microsoft.com/en-us/xamarin/android/platform/app-linking">App-Linking in Android</a>
    <br>
    <a href="https://developer.android.com/training/app-links">Handling Android App Links</a>
    <br>
    <br>
    <br>
    <div class="row mb-3 adin_gray_box p-3 m-3">
        <div class="col-md-6 themed-grid-col">

        </div>
        <div class="col-md-6 themed-grid-col"></div>
    </div>


    <div class="row mb-3 adin_gray_box p-3 m-3">
        <div class="col-md-6 themed-grid-col">
            Follow along with me.
            <br />
            <br />
            Create a new .Maui App.
            <br>
            <br>
            I will use Shell for navigation to demonstrate how it works, but this is not a prerequisite to do deep linking.
            <br>
            <br>
            Since we want to show that we can handle deep linking, we will create a second page and when the user arrives from the link we will forward the user to the second page in the app.
            <br>
            So, Create a second page called <b>SecondPage.xaml</b>. I'm using the domain "aronson.co.il", replace this with your domain.
            <br>
            <br>
        </div>
        <div class="col-md-6 themed-grid-col"></div>
    </div>

    <div class="row mb-3 adin_gray_box p-3 m-3">
        <div class="col-md-6 themed-grid-col">
            <p>In <b>AppShell.xaml</b> add the following so we can later navigate to the second page:</p>

            <pre>
                    &lt;ShellContent 
                    Title=&quot;Second Page&quot; 
                    ContentTemplate=&quot;{DataTemplate local:SecondPage}&quot; 
                    Route=&quot;SecondPage&quot; /&gt;
                </pre>

        </div>
        <div class="col-md-6 themed-grid-col"><img src="Screenshot%202023-02-01%20161145.jpg" /></div>
    </div>

    <div class="row mb-3 adin_gray_box p-3 m-3">
        <div class="col-md-6 themed-grid-col">
            Open MainActivity.cs
        </div>
        <div class="col-md-6 themed-grid-col"><img src="Screenshot%202023-02-01%20161412.jpg" /></div>
    </div>

    <br>

    <br>
    <br>
    
    <br>
    
    <br>
    <br>
    add the IntentFilter:
    <br>
<pre>
    [IntentFilter(new[] { Android.Content.Intent.ActionView },
                      DataScheme = "http",
                      DataHost = "aronson.co.il",
                      DataPathPrefix = "/bubu",
                      AutoVerify = true,
                      Categories = new[] { Android.Content.Intent.ActionView, Android.Content.Intent.CategoryDefault, Android.Content.Intent.CategoryBrowsable })]
    [IntentFilter(new[] { Android.Content.Intent.ActionView },
                      DataScheme = "https",
                      DataHost = "aronson.co.il",
                      DataPathPrefix = "/bubu",
                      AutoVerify = true,
                      Categories = new[] { Android.Content.Intent.ActionView, Android.Content.Intent.CategoryDefault, Android.Content.Intent.CategoryBrowsable })]
</pre>
    <br>
    <hr>
    Note: IntentFilters defined in MainActivity.cs are infused into the AndroidManifest.xml when compiling.
    <br>
    If you want to see the XML created, go to "\obj\Debug\net7.0-android" folder and open AndroidManifest.xml file, you will see how they look in the XML:
    <br>
    <img src="AndroidManifest.xml.jpg">
    <br>
    <br>
    <hr>
    <br>
    In the above you can see that I defined the <b>DataPathPrefix</b> to "bubu" so this means that if the link is URL + "bubu" (https://aronson.co.il/bubu) - tapping it will activate opening of app but otherwise the domain will open in the browser
    <br />
    <br>
    <Br>
    To handle the event of your app being opened from a link you need to add the OnCreate function:
    <br />
    protected override void OnCreate(Bundle savedInstanceState)
<pre>
    {
      Intent intent = this.Intent;
      var action = intent.Action;
      var strLink = intent.DataString;
      if (Intent.ActionView == action && !string.IsNullOrWhiteSpace(strLink))
      {
          //handle intent routing
          Shell.Current.GoToAsync($"//{nameof(SecondPage)}", true);
      }
    base.OnCreate(savedInstanceState);
    }
    //This code was found at <a href="https://stackoverflow.com/a/74888250/5754">here</a>
  </pre>
    Here is what my MainActivity.cs looks like after ading the IntentFilters and the OnCreate function:
    <br>
    <img src="Screenshot%202023-02-01%20155024.jpg" />
    <br>
    <br>
    For this to work after deploying to Google Play (without having to manually set like I will show below) you will need to add a special file to your site, I will explain about this below. But for now, let us test this in the Android Emulator. (I believe you need to have Google Play Store in the Android Emulator to see the "Open by Default" option I will describe below
    <br>
    <br>
    <br>
    Create a webpage with an href link to aronson.co.il/bubu which you can access from the browser in the Android Emulator
    <br>
    <br>
    Run the app in the Emulator
    <br>
    <br>
    Open the "App Info" page (you can do this by opening the App Switcher screen, tapping the icon above the app and then selecting "App Info"
    <br>
    <img src="Screenshot%202023-02-01%20154336.jpg" />
    <br>
    <br>
    Scroll down to "Open by default" and tap it
    <br>
    <img src="Screenshot%202023-02-01%20154410.jpg" />
    <br>
    <br>
    Tap on "Add Link"
    <br>
    <img src="Screenshot%202023-02-01%20154439.jpg" />
    <br>
    <br>
    You should see the domain you defined in the IntentFilters, tap the checkbox and then tap "Add"
    <br>
    <img src="Screenshot%202023-02-01%20154503.jpg" />
    <br>
    <br>
    <br>
    <br>
    Now, go to the webpage you created in the emulator's browser.
    here you can see I created two links, the top one should open the app and direct the user to second page.
    <br>
    <br>
    <img src="Screenshot%202023-02-01%20154552.jpg" />
    <br>
    <br>
    Here you can see I put a breakpoint which handles the event and I know the URL that was clicked:
    <br>
    <img src="Screenshot%202023-02-01%20160735.jpg" />
    <br>
    <br>
    The second link I have in the webpage (aronson.co.il/gaga) is to make sure that clicking on it does NOT open the app.

    <br>
    <br>
    <br>
    <h3>The Digital Assets Link File - assetlinks.json</h3>

    In order for the link to work after deploying to the Google Play store you will need to prove ownership of the domain (in my case - aronson.co.il)
    <br>
    You do this by creating a file called assetlinks.json and putting it in the /.well-known/ (so in my case - aronson.co.il/.well-known/assetlinks.json)
    <br>
    The easiest way to do this, is to upload your app to the Google Play console and and let Google tell you the content of the file needed
    <br>
    Go to your app and the on left side panel scroll down to "Deep Links" in the "Grow" section
    <br>
    <img src="gpconsole1.jpg">
    <br>
    <br>
    Here you can see the domain and weblink you defined in the IntentFilters.
    <br>
    Click on the arrow to the right of domain:
    <br>
    <img src="gpconsole2.jpg">
    <br>
    <br>
    Click on "Show More v":
    <br>
    <img src="gpconsole3.jpg">
    <br>
    <br>
    And here you have the content of the file you need and the location it needs to be on your site!
    <br>
    <img src="gpconsole4.jpg">
    <br>
    <br>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>
</html>